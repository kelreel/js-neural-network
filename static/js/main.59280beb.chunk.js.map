{"version":3,"sources":["components/App/Header/styled.tsx","components/App/Header/Header.tsx","models/variant.ts","core/index.ts","core/network-service.ts","assets/1.png","assets/2.png","assets/3.png","assets/4.png","assets/5.png","components/variant/Image/styled.ts","components/variant/Image/index.tsx","components/variant/VariantSelector/styled.ts","components/variant/VariantSelector/VariantSelector.tsx","components/Neuron/Neuron.tsx","components/App/Network/Network.tsx","components/Iterations/index.jsx","components/App/App.tsx","index.tsx"],"names":["Container","styled","header","Logo","div","Header","ActivateFunctionEnum","setVariant","createEvent","variant$","createStore","on","_","val","setActFunction","actFunction$","relu","func","setSpeed","speed$","speed","setInputValues","inputValues$","setOutputVal","outputVal$","store$","combine","variant","input","output","NeuralNetwork","neurons","ridges","activate","activateFunction","getNeuronById","id","find","n","findInRidgesForNeuron","filter","r","toNeuron","findOutRidgesFromNeuron","fromNeuron","this","input_values","forEach","ridge","index","isInput","Neuron","_value","inId","i","length","neurVal","bias","weight","input_val","right_val","reverse","err","error","calculateLastNeuronError","map","leftVal","rightError","inputLayer","undefined","Ridge","var1","reluF","sigmoidF","Math","exp","Net","getState","network$","neurons$","fit","backPropagation","iterations$","watch","fn","getActivateFunc","console","log","network","payload","data","merge","state","reset","Image","img","ImageContainer","VariantImage","srcImg","var2","var3","var4","var5","src","alt","VariantContainer","VariantForm","Selector","select","Button","button","VariantSelector","store","useStore","onChange","e","target","value","sigmoid","tanh","type","step","min","max","vals","onClick","fitAndBackX","Id","p","Val","Err","round","neuron","NetContainer","Network","useState","table","Iterations","iterations","item","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59280beb.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const Container = styled.header`\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  padding: 20px;\r\n  background-color: #161616;\r\n`\r\n\r\nexport const Logo = styled.div`\r\n  margin-left: 20px;\r\n  color: #fff;\r\n  font-size: 1.2rem;\r\n  font-weight: 600;\r\n`","import React from 'react'\r\nimport { Container, Logo } from './styled'\r\n\r\nexport default function Header() {\r\n  return (\r\n    <Container>\r\n      <Logo>Методы Data Mining. Нейронные сети.</Logo>\r\n    </Container>\r\n  )\r\n}\r\n","import { combine, createEvent, createStore } from \"effector\";\r\n\r\nexport const setVariant = createEvent<number>();\r\nexport const variant$ = createStore<number>(1);\r\n\r\nvariant$.on(setVariant, (_, val) => val);\r\n\r\nexport enum ActivateFunctionEnum {\r\n  relu = 'relu',\r\n  sigmoid = 'sigmoid',\r\n  tanh = 'tanh'\r\n}\r\n\r\nexport const setActFunction = createEvent<ActivateFunctionEnum>();\r\nexport const actFunction$ = createStore(ActivateFunctionEnum.relu);\r\n\r\nactFunction$.on(setActFunction, (_, func) => func);\r\n\r\nexport const setSpeed = createEvent<number>();\r\nexport const speed$ = createStore<number>(0.9);\r\n\r\nspeed$.on(setSpeed, (_, speed) => speed);\r\n\r\nexport const setInputValues = createEvent<number[]>();\r\nexport const inputValues$ = createStore<number[]>([0.5, 0.9]);\r\n\r\ninputValues$.on(setInputValues, (_, val) => val);\r\n\r\nexport const setOutputVal = createEvent<number>();\r\nexport const outputVal$ = createStore<number>(1.32);\r\n\r\noutputVal$.on(setOutputVal, (_, val) => val);\r\n\r\nexport const store$ = combine({\r\n    variant: variant$,\r\n    func: actFunction$,\r\n    speed: speed$,\r\n    input: inputValues$,\r\n    output: outputVal$\r\n})","export type ActivateFunction = (val: number) => number;\r\n\r\nexport class NeuralNetwork {\r\n  activateFunction: Function;\r\n  speed: number;\r\n\r\n  constructor(\r\n    neurons: Neuron[],\r\n    ridges: Ridge[],\r\n    activate: ActivateFunction,\r\n    speed: number\r\n  ) {\r\n    this.neurons = neurons;\r\n    this.ridges = ridges;\r\n    this.activateFunction = activate;\r\n    this.speed = speed;\r\n  }\r\n  // input: number[] = [];\r\n  ridges: Ridge[];\r\n  neurons: Neuron[];\r\n\r\n  getNeuronById = (id: number) => this.neurons.find((n) => n.id === id);\r\n\r\n  findInRidgesForNeuron = (id: number) =>\r\n    this.ridges.filter((r) => r.toNeuron?.id === id);\r\n\r\n  findOutRidgesFromNeuron = (id: number) =>\r\n    this.ridges.filter((r) => r.fromNeuron?.id === id);\r\n\r\n  fit(input_values: number[]) {\r\n    this.ridges.forEach((ridge, index) => {\r\n      if (ridge.isInput) {\r\n        let n = new Neuron(0 - index, true);\r\n        n._value = input_values[ridge.inId!];\r\n        this.ridges[index].fromNeuron = n;\r\n      }\r\n    });\r\n\r\n    for (let i = 0; i < this.neurons.length; i++) {\r\n      let n = this.neurons[i];\r\n      let ridges = this.findInRidgesForNeuron(n.id);\r\n\r\n      let neurVal = 0;\r\n\r\n      ridges.forEach((r) => {\r\n        if (r.bias) {\r\n          neurVal += r.weight * 1;\r\n        } else {\r\n          neurVal += r.weight * r.fromNeuron!._value;\r\n        }\r\n      });\r\n\r\n      n._value = this.activateFunction(neurVal);\r\n    }\r\n\r\n    return this.neurons[this.neurons.length - 1]._value;\r\n  }\r\n\r\n  backPropagation(input_val: number[], right_val: number) {\r\n    const calculateLastNeuronError = (n: Neuron): number =>\r\n      n._value >= 0 ? -(right_val - n._value) : 0;\r\n      // -n._value * (right_val - n._value) * (1 - n._value);\r\n\r\n    this.neurons = this.neurons.reverse();\r\n\r\n    this.neurons.forEach((n, index) => {\r\n      if (index === 0) {\r\n        this.neurons[0].error = calculateLastNeuronError(this.neurons[0]);\r\n        return;\r\n      }\r\n\r\n      let err = 0;\r\n\r\n      let ridges = this.findOutRidgesFromNeuron(n.id);\r\n      ridges.forEach((r) => {\r\n        // @ts-ignore\r\n        err += r.weight * this.getNeuronById(r.toNeuron?.id).error;\r\n      });\r\n\r\n      err *= (1 - n._value) * n._value;\r\n\r\n      this.neurons[index].error = err;\r\n    });\r\n\r\n    this.neurons = this.neurons.reverse();\r\n\r\n    this.ridges = this.ridges.map((ridge, index) => {\r\n      let rightError = this.getNeuronById(ridge!.toNeuron!.id)!.error;\r\n      let leftVal: number;\r\n\r\n      if (ridge.isInput) {\r\n        // @ts-ignore\r\n        leftVal = input_val[ridge?.inId];\r\n      } else if (ridge.bias) {\r\n        leftVal = 1;\r\n      } else {\r\n        // @ts-ignore\r\n        leftVal = this.getNeuronById(ridge.fromNeuron.id)._value;\r\n      }\r\n\r\n      return {\r\n        ...ridge,\r\n        weight: ridge.weight + -this.speed * rightError! * leftVal,\r\n      };\r\n    });\r\n  }\r\n}\r\n\r\nexport class Neuron {\r\n  id: number;\r\n  inputLayer: boolean;\r\n  _value: number;\r\n  error: number | null = null;\r\n\r\n  constructor(id: number, inputLayer: boolean = false) {\r\n    this.id = id;\r\n    this.inputLayer = inputLayer;\r\n    // @ts-ignore\r\n    this._value = undefined;\r\n  }\r\n}\r\n\r\nexport class Ridge {\r\n  id: number;\r\n  weight: number;\r\n  bias: boolean;\r\n  isInput: boolean;\r\n  inId: number | null; // input Id\r\n\r\n  fromNeuron: Neuron | null;\r\n  toNeuron: Neuron | null;\r\n\r\n  constructor(\r\n    id: number,\r\n    weight: number,\r\n    fromNeuron: Neuron | null,\r\n    toNeuron: Neuron,\r\n    bias: boolean = false,\r\n    isInput: boolean = false,\r\n    inId: number | null = null\r\n  ) {\r\n    this.id = id;\r\n    this.weight = weight;\r\n    this.fromNeuron = fromNeuron;\r\n    this.toNeuron = toNeuron;\r\n    this.bias = bias;\r\n    this.isInput = isInput;\r\n    this.inId = inId;\r\n  }\r\n}\r\n","import { createEvent, createStore, merge } from \"effector\";\r\nimport { ActivateFunction, NeuralNetwork, Neuron, Ridge } from \".\";\r\nimport {\r\n  actFunction$,\r\n  ActivateFunctionEnum,\r\n  setActFunction,\r\n  setSpeed,\r\n  speed$,\r\n  store$,\r\n  variant$,\r\n} from \"../models/variant\";\r\n\r\nlet neurons: Neuron[] = [\r\n  new Neuron(0),\r\n  new Neuron(1),\r\n  new Neuron(2),\r\n  new Neuron(3),\r\n  new Neuron(4),\r\n];\r\n\r\nlet var1: Ridge[] = [\r\n  new Ridge(100, -0.5, null, neurons[0], true, false),\r\n  new Ridge(101, 0.6, null, neurons[0], false, true, 0),\r\n  new Ridge(102, 0.3, null, neurons[0], false, true, 1),\r\n  new Ridge(110, 0.8, null, neurons[1], false, true, 0),\r\n  new Ridge(111, -0.8, null, neurons[1], false, true, 1),\r\n  new Ridge(112, 0.1, null, neurons[1], true, false),\r\n  new Ridge(200, 0.7, null, neurons[2], true),\r\n  new Ridge(201, 0.4, neurons[0], neurons[2]),\r\n  new Ridge(202, -0.3, neurons[1], neurons[2]),\r\n  new Ridge(210, 1, neurons[0], neurons[3]),\r\n  new Ridge(211, 0.7, neurons[1], neurons[3]),\r\n  new Ridge(212, -0.2, null, neurons[3], true),\r\n  new Ridge(300, -0.3, null, neurons[4], true),\r\n  new Ridge(301, 0.9, neurons[2], neurons[4]),\r\n  new Ridge(302, 0.1, neurons[3], neurons[4]),\r\n];\r\n\r\nconst reluF: ActivateFunction = (val) => {\r\n  return val > 0 ? val : 0;\r\n};\r\n\r\nconst sigmoidF: ActivateFunction = (val) => {\r\n  return 1 / (1 + Math.exp(-val));\r\n};\r\n\r\nexport let Net = new NeuralNetwork(\r\n  [...neurons],\r\n  var1,\r\n  reluF,\r\n  speed$.getState()\r\n);\r\nexport const network$ = createStore<NeuralNetwork>(Net);\r\n\r\nexport const neurons$ = createStore<Neuron[]>([...Net.neurons]);\r\n\r\nexport const fit = createEvent();\r\nexport const backPropagation = createEvent();\r\n\r\nconst getActivateFunc = (val?: ActivateFunctionEnum) => {\r\n  if (!val) val = actFunction$.getState()!;\r\n  let fn = reluF;\r\n  switch (val) {\r\n    case \"relu\":\r\n      fn = reluF;\r\n      break;\r\n    case \"sigmoid\":\r\n      fn = sigmoidF;\r\n      break;\r\n  }\r\n  return fn;\r\n};\r\n\r\nexport const iterations$ = createStore<number[]>([]);\r\n\r\nspeed$.watch((val) => {\r\n  Net = new NeuralNetwork([...neurons], var1, getActivateFunc(), val);\r\n  console.log(Net);\r\n});\r\n\r\nnetwork$\r\n  .on(fit, (network, payload) => {\r\n    network.fit(store$.getState().input);\r\n    console.log(network.neurons[network.neurons.length - 1]._value);\r\n  })\r\n  .on(backPropagation, (network, payload) => {\r\n    network.backPropagation(store$.getState().input, store$.getState().output);\r\n  });\r\n\r\nneurons$\r\n  .on(fit, (_, data) => [...Net.neurons])\r\n  .on(backPropagation, (_, data) => [...Net.neurons])\r\n  .on(merge([setActFunction]), (_, data) => [...Net.neurons]);\r\n\r\niterations$\r\n  .on(fit, (state, val) => [\r\n    ...state,\r\n    Net.neurons[Net.neurons.length - 1]._value,\r\n  ])\r\n  .reset(merge([setSpeed, setActFunction]));\r\n\r\n// neurons$.watch(console.log);\r\n\r\n// merge([fit, backPropagation]).watch(() => {\r\n//     console.log(network$.getState().neurons);\r\n// });\r\n\r\n// for (let i = 0; i < 10; i++) {\r\n//   console.log(n.fit([0.1, 0.9]));\r\n//   n.backPropagation([0.1, 0.9], 1);\r\n// }\r\n// console.log(n.neurons);\r\n// console.log(n.ridges);\r\n","export default __webpack_public_path__ + \"static/media/1.af8f6884.png\";","export default __webpack_public_path__ + \"static/media/2.77b3d1f0.png\";","export default __webpack_public_path__ + \"static/media/3.c6fd645d.png\";","export default __webpack_public_path__ + \"static/media/4.036449fc.png\";","export default __webpack_public_path__ + \"static/media/5.efbaf15b.png\";","import styled from \"styled-components\";\r\n\r\nexport const Image = styled.img`\r\n  width: 100%;\r\n  max-width: 1000px;\r\n  height: auto;\r\n  object-fit: contain;\r\n`;\r\n\r\nexport const ImageContainer = styled.div`\r\n    display: flex;\r\n    margin-left: 20px;\r\n    flex: 2;\r\n    border: 1px solid #ccc;\r\n`","import React from \"react\";\r\nimport var1 from \"../../../assets/1.png\";\r\nimport var2 from \"../../../assets/2.png\";\r\nimport var3 from \"../../../assets/3.png\";\r\nimport var4 from \"../../../assets/4.png\";\r\nimport var5 from \"../../../assets/5.png\";\r\nimport { Image, ImageContainer } from \"./styled\";\r\n\r\nexport default function VariantImage({ variant }: { variant: number }) {\r\n  let srcImg;\r\n  switch (variant) {\r\n    case 1:\r\n      srcImg = var1;\r\n      break;\r\n    case 2:\r\n      srcImg = var2;\r\n      break;\r\n    case 3:\r\n      srcImg = var3;\r\n      break;\r\n    case 4:\r\n      srcImg = var4;\r\n      break;\r\n    case 5:\r\n      srcImg = var5;\r\n      break;\r\n  }\r\n  return (\r\n    <ImageContainer>\r\n      <Image src={srcImg} alt=\"neural network\" />\r\n    </ImageContainer>\r\n  );\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const VariantContainer = styled.div`\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n`;\r\n\r\nexport const VariantForm = styled.div`\r\n  display: flex;\r\n  flex-flow: column wrap;\r\n`;\r\n\r\nexport const Selector = styled.select`\r\n  margin-bottom: 5px;\r\n  /* color: red; */\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  border: 1px solid #ccc;\r\n  margin-top: 10px;\r\n  padding-top: 5px;\r\n  border-radius: 3px;\r\n  padding-bottom: 5px;\r\n  margin-bottom: 10px;\r\n  transition: 0.3s;\r\n\r\n  &:hover {\r\n    background-color: #c3b7b7;\r\n  }\r\n`;\r\n","import { useStore } from \"effector-react\";\r\nimport React from \"react\";\r\nimport {\r\n  ActivateFunctionEnum,\r\n  setActFunction,\r\n  setInputValues,\r\n  setOutputVal,\r\n  setSpeed,\r\n  setVariant,\r\n  store$,\r\n} from \"../../../models/variant\";\r\nimport \"../../../core/network-service\";\r\nimport VariantImage from \"../Image\";\r\nimport { Button, Selector, VariantContainer, VariantForm } from \"./styled\";\r\nimport { backPropagation, fit } from \"../../../core/network-service\";\r\n\r\nexport default function VariantSelector() {\r\n  const store = useStore(store$);\r\n\r\n  const fitAndBack = () => {\r\n    fit();\r\n    backPropagation();\r\n  };\r\n\r\n  const fitAndBackX = () => {\r\n    for (let i = 0; i < 5; i++) {\r\n      fit();\r\n      backPropagation();\r\n    }\r\n  };\r\n  return (\r\n    <VariantContainer>\r\n      <VariantForm>\r\n        <h3>Выберите вариант:</h3>\r\n        <Selector\r\n          onChange={(e) => setVariant(+e.target.value)}\r\n          value={store.variant}\r\n        >\r\n          <option value={1}>1 вариант</option>\r\n          <option value={2}>2 вариант</option>\r\n          <option value={3}>3 вариант</option>\r\n          <option value={4}>4 вариант</option>\r\n          <option value={5}>5 вариант</option>\r\n        </Selector>\r\n        <h4>Функция активации:</h4>\r\n        <Selector\r\n          value={store.func}\r\n          onChange={(e) =>\r\n            setActFunction(e.target.value as ActivateFunctionEnum)\r\n          }\r\n        >\r\n          <option value={ActivateFunctionEnum.relu}>ReLu</option>\r\n          <option value={ActivateFunctionEnum.sigmoid}>Sigmoid</option>\r\n          <option value={ActivateFunctionEnum.tanh}>tanh</option>\r\n        </Selector>\r\n        <h4>Скорость обучения:</h4>\r\n        <input\r\n          type=\"number\"\r\n          value={store.speed}\r\n          step={0.1}\r\n          min={0.1}\r\n          max={1}\r\n          onChange={(e) => setSpeed(+e.target.value)}\r\n        />\r\n        <h4>Входные значения:</h4>\r\n        <input\r\n          type=\"number\"\r\n          step={0.1}\r\n          onChange={(e) => {\r\n            const vals = store.input.map((val, i) => {\r\n              if (i === 0) return +e.target.value;\r\n              return val;\r\n            });\r\n            setInputValues(vals);\r\n          }}\r\n          value={store.input[0]}\r\n        />\r\n        <input\r\n          type=\"number\"\r\n          step={0.1}\r\n          onChange={(e) => {\r\n            const vals = store.input.map((val, i) => {\r\n              if (i === 1) return +e.target.value;\r\n              return val;\r\n            });\r\n            setInputValues(vals);\r\n          }}\r\n          value={store.input[1]}\r\n        />\r\n        {/* <input\r\n          onChange={(e) => {\r\n            const vals = store.input.map((val, i) => {\r\n              if (i === 2) return +e.target.value;\r\n              return val;\r\n            });\r\n            setInputValues(vals);\r\n          }}\r\n          type=\"number\"\r\n          value={store.input[2]}\r\n        /> */}\r\n        <h4>Выходное значение (Y-real):</h4>\r\n        <input\r\n          type=\"number\"\r\n          value={store.output}\r\n          step={0.1}\r\n          onChange={(e) => setOutputVal(+e.target.value)}\r\n        />\r\n        <Button onClick={() => fit()}>Fit</Button>\r\n        <Button onClick={() => backPropagation()}>Back Propagation</Button>\r\n        <Button onClick={() => fitAndBack()}>Fit & Back Propagation</Button>\r\n        <Button onClick={() => fitAndBackX()}>\r\n          Fit & Back Propagation (x5)\r\n        </Button>\r\n      </VariantForm>\r\n      <VariantImage variant={store.variant} />\r\n    </VariantContainer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Neuron as NeuronType } from \"../../core\";\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-flow: column wrap;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin: 10px;\r\n  border: 1px solid black;\r\n  border-radius: 5px;\r\n  width: 200px;\r\n`;\r\n\r\nconst Id = styled.p`\r\n  color: black;\r\n  font-weight: 700;\r\n`;\r\n\r\nconst Val = styled.p`\r\n  color: green;\r\n  font-weight: 600;\r\n`;\r\n\r\nconst Err = styled.p`\r\n  color: red;\r\n  font-weight: 600;\r\n`;\r\n\r\nconst round = (val: number) => Math.round(val * 100000) / 100000;\r\n\r\nexport default function Neuron({ neuron }: { neuron: NeuronType }) {\r\n  return (\r\n    <Container>\r\n      <Id>ID: {neuron.id}</Id>\r\n      <Val>Value: {neuron._value && round(neuron._value!)}</Val>\r\n      <Err>Error: {neuron.error && round(neuron.error!)}</Err>\r\n      {/* <pre>{JSON.stringify(neuron, null, 2)}</pre> */}\r\n    </Container>\r\n  );\r\n}\r\n","import { useEvent, useStore } from \"effector-react\";\r\nimport React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { fit, Net, network$, neurons$ } from \"../../../core/network-service\";\r\nimport Neuron from \"../../Neuron/Neuron\";\r\n\r\nconst NetContainer = styled.div`\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  /* justify-content: center; */\r\n  align-items: center;\r\n  margin-top: 15px;\r\n  margin-bottom: 15px;\r\n  width: 100%;\r\n`;\r\n\r\nexport default function Network() {\r\n  const [, rerender] = useState(\"\");\r\n\r\n  const neurons = useStore(neurons$);\r\n  return (\r\n    <NetContainer>\r\n      {neurons.map((neuron) => (\r\n        <Neuron key={neuron.id} neuron={neuron} />\r\n      ))}\r\n    </NetContainer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useEvent, useStore } from \"effector-react\";\r\nimport { iterations$ } from \"../../core/network-service\";\r\n\r\nconst Container = styled.table`\r\n  border-collapse: collapse;\r\n  td,\r\n  th {\r\n    padding: 5px;\r\n    border: 1px solid black;\r\n  }\r\n`;\r\n\r\nexport default function Iterations() {\r\n  const iterations = useStore(iterations$);\r\n  return (\r\n    <Container>\r\n      <thead>\r\n        <tr>\r\n          <th>Iteration №</th>\r\n          <th>Output Val.</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {iterations.map((item, index) => (\r\n          <tr key={index}>\r\n            <td>{index + 1}</td>\r\n            <td>{item}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </Container>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Header from \"./Header/Header\";\r\nimport \"./App.css\";\r\nimport VariantSelector from \"../variant/VariantSelector/VariantSelector\";\r\nimport Network from \"./Network/Network\";\r\nimport Iterations from \"../Iterations\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <main>\r\n        <VariantSelector />\r\n        <Network />\r\n        <Iterations />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport 'normalize.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}